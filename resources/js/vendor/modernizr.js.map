{"version":3,"sources":["vendor/modernizr.js"],"names":["window","document","undefined","tests","ModernizrProto","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","on","test","cb","self","this","setTimeout","addTest","name","fn","options","push","addAsyncTest","Modernizr","prototype","classes","is","obj","type","hasOwnProp","_hasOwnProperty","docElement","documentElement","isSVG","nodeName","toLowerCase","setClasses","className","baseVal","reJS","RegExp","replace","join","feature","key","featureNameSplit","split","last","length","Boolean","_trigger","createElement","arguments","createElementNS","call","apply","hasOwnProperty","object","property","constructor","_l","res","cbs","i","hasEvent","needsFallback","eventName","element","isSupported","setAttribute","removeAttribute","featureNames","aliasIdx","result","nameIdx","featureIdx","aliases","testRunner"],"mappings":"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","file":"modernizr.js","sourcesContent":["/*!\n * modernizr v3.6.0\n * Build https://modernizr.com/download?-search-addtest-setclasses-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.6.0',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n\n  }\n\n  ;\n\n  /**\n   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\n   *\n   * @author kangax\n   * @access private\n   * @function hasOwnProp\n   * @param {object} object - The object to check for a property\n   * @param {string} property - The property to check for\n   * @returns {boolean}\n   */\n\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\n  var hasOwnProp;\n\n  (function() {\n    var _hasOwnProperty = ({}).hasOwnProperty;\n    /* istanbul ignore else */\n    /* we have no way of testing IE 5.5 or safari 2,\n     * so just assume the else gets hit */\n    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n      hasOwnProp = function(object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function(object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n  })();\n\n  \n\n\n   // _l tracks listeners for async tests, as well as tests that execute after the initial run\n  ModernizrProto._l = {};\n\n  /**\n   * Modernizr.on is a way to listen for the completion of async tests. Being\n   * asynchronous, they may not finish before your scripts run. As a result you\n   * will get a possibly false negative `undefined` value.\n   *\n   * @memberof Modernizr\n   * @name Modernizr.on\n   * @access public\n   * @function on\n   * @param {string} feature - String name of the feature detect\n   * @param {function} cb - Callback function returning a Boolean - true if feature is supported, false if not\n   * @example\n   *\n   * ```js\n   * Modernizr.on('flash', function( result ) {\n   *   if (result) {\n   *    // the browser has flash\n   *   } else {\n   *     // the browser does not have flash\n   *   }\n   * });\n   * ```\n   */\n\n  ModernizrProto.on = function(feature, cb) {\n    // Create the list of listeners if it doesn't exist\n    if (!this._l[feature]) {\n      this._l[feature] = [];\n    }\n\n    // Push this test on to the listener list\n    this._l[feature].push(cb);\n\n    // If it's already been resolved, trigger it on next tick\n    if (Modernizr.hasOwnProperty(feature)) {\n      // Next Tick\n      setTimeout(function() {\n        Modernizr._trigger(feature, Modernizr[feature]);\n      }, 0);\n    }\n  };\n\n  /**\n   * _trigger is the private function used to signal test completion and run any\n   * callbacks registered through [Modernizr.on](#modernizr-on)\n   *\n   * @memberof Modernizr\n   * @name Modernizr._trigger\n   * @access private\n   * @function _trigger\n   * @param {string} feature - string name of the feature detect\n   * @param {function|boolean} [res] - A feature detection function, or the boolean =\n   * result of a feature detection function\n   */\n\n  ModernizrProto._trigger = function(feature, res) {\n    if (!this._l[feature]) {\n      return;\n    }\n\n    var cbs = this._l[feature];\n\n    // Force async\n    setTimeout(function() {\n      var i, cb;\n      for (i = 0; i < cbs.length; i++) {\n        cb = cbs[i];\n        cb(res);\n      }\n    }, 0);\n\n    // Don't trigger these again\n    delete this._l[feature];\n  };\n\n  /**\n   * addTest allows you to define your own feature detects that are not currently\n   * included in Modernizr (under the covers it's the exact same code Modernizr\n   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)). Just like the offical detects, the result\n   * will be added onto the Modernizr object, as well as an appropriate className set on\n   * the html element when configured to do so\n   *\n   * @memberof Modernizr\n   * @name Modernizr.addTest\n   * @optionName Modernizr.addTest()\n   * @optionProp addTest\n   * @access public\n   * @function addTest\n   * @param {string|object} feature - The string name of the feature detect, or an\n   * object of feature detect names and test\n   * @param {function|boolean} test - Function returning true if feature is supported,\n   * false if not. Otherwise a boolean representing the results of a feature detection\n   * @example\n   *\n   * The most common way of creating your own feature detects is by calling\n   * `Modernizr.addTest` with a string (preferably just lowercase, without any\n   * punctuation), and a function you want executed that will return a boolean result\n   *\n   * ```js\n   * Modernizr.addTest('itsTuesday', function() {\n   *  var d = new Date();\n   *  return d.getDay() === 2;\n   * });\n   * ```\n   *\n   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\n   * and to `false` every other day of the week. One thing to notice is that the names of\n   * feature detect functions are always lowercased when added to the Modernizr object. That\n   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\n   *\n   *\n   *  Since we only look at the returned value from any feature detection function,\n   *  you do not need to actually use a function. For simple detections, just passing\n   *  in a statement that will return a boolean value works just fine.\n   *\n   * ```js\n   * Modernizr.addTest('hasJquery', 'jQuery' in window);\n   * ```\n   *\n   * Just like before, when the above runs `Modernizr.hasjquery` will be true if\n   * jQuery has been included on the page. Not using a function saves a small amount\n   * of overhead for the browser, as well as making your code much more readable.\n   *\n   * Finally, you also have the ability to pass in an object of feature names and\n   * their tests. This is handy if you want to add multiple detections in one go.\n   * The keys should always be a string, and the value can be either a boolean or\n   * function that returns a boolean.\n   *\n   * ```js\n   * var detects = {\n   *  'hasjquery': 'jQuery' in window,\n   *  'itstuesday': function() {\n   *    var d = new Date();\n   *    return d.getDay() === 2;\n   *  }\n   * }\n   *\n   * Modernizr.addTest(detects);\n   * ```\n   *\n   * There is really no difference between the first methods and this one, it is\n   * just a convenience to let you write more readable code.\n   */\n\n  function addTest(feature, test) {\n\n    if (typeof feature == 'object') {\n      for (var key in feature) {\n        if (hasOwnProp(feature, key)) {\n          addTest(key, feature[ key ]);\n        }\n      }\n    } else {\n\n      feature = feature.toLowerCase();\n      var featureNameSplit = feature.split('.');\n      var last = Modernizr[featureNameSplit[0]];\n\n      // Again, we don't check for parent test existence. Get that right, though.\n      if (featureNameSplit.length == 2) {\n        last = last[featureNameSplit[1]];\n      }\n\n      if (typeof last != 'undefined') {\n        // we're going to quit if you're trying to overwrite an existing test\n        // if we were to allow it, we'd do this:\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n        //   docElement.className = docElement.className.replace( re, '' );\n        // but, no rly, stuff 'em.\n        return Modernizr;\n      }\n\n      test = typeof test == 'function' ? test() : test;\n\n      // Set the value (this is the magic, right here).\n      if (featureNameSplit.length == 1) {\n        Modernizr[featureNameSplit[0]] = test;\n      } else {\n        // cast to a Boolean, if not one already\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n        }\n\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n      }\n\n      // Set a single class (either `feature` or `no-feature`)\n      setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);\n\n      // Trigger the event\n      Modernizr._trigger(feature, test);\n    }\n\n    return Modernizr; // allow chaining.\n  }\n\n  // After all the tests are run, add self to the Modernizr prototype\n  Modernizr._q.push(function() {\n    ModernizrProto.addTest = addTest;\n  });\n\n  \n\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Modernizr.hasEvent() detects support for a given event\n   *\n   * @memberof Modernizr\n   * @name Modernizr.hasEvent\n   * @optionName Modernizr.hasEvent()\n   * @optionProp hasEvent\n   * @access public\n   * @function hasEvent\n   * @param  {string|*} eventName - the name of an event to test for (e.g. \"resize\")\n   * @param  {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on\n   * @returns {boolean}\n   * @example\n   *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.\n   *  By default, it does this detection on a div element\n   *\n   * ```js\n   *  hasEvent('blur') // true;\n   * ```\n   *\n   * However, you are able to give an object as a second argument to hasEvent to\n   * detect an event on something other than a div.\n   *\n   * ```js\n   *  hasEvent('devicelight', window) // true;\n   * ```\n   *\n   */\n\n  var hasEvent = (function() {\n\n    // Detect whether event support can be detected via `in`. Test on a DOM element\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection\n    var needsFallback = !('onblur' in document.documentElement);\n\n    function inner(eventName, element) {\n\n      var isSupported;\n      if (!eventName) { return false; }\n      if (!element || typeof element === 'string') {\n        element = createElement(element || 'div');\n      }\n\n      // Testing via the `in` operator is sufficient for modern browsers and IE.\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and\n      // \"resize\", whereas `in` \"catches\" those.\n      eventName = 'on' + eventName;\n      isSupported = eventName in element;\n\n      // Fallback technique for old Firefox - bit.ly/event-detection\n      if (!isSupported && needsFallback) {\n        if (!element.setAttribute) {\n          // Switch to generic element if it lacks `setAttribute`.\n          // It could be the `document`, `window`, or something else.\n          element = createElement('div');\n        }\n\n        element.setAttribute(eventName, '');\n        isSupported = typeof element[eventName] === 'function';\n\n        if (element[eventName] !== undefined) {\n          // If property was created, \"remove it\" by setting value to `undefined`.\n          element[eventName] = undefined;\n        }\n        element.removeAttribute(eventName);\n      }\n\n      return isSupported;\n    }\n    return inner;\n  })();\n\n\n  ModernizrProto.hasEvent = hasEvent;\n  \n/*!\n{\n  \"name\": \"input[search] search event\",\n  \"property\": \"search\",\n  \"tags\": [\"input\",\"search\"],\n  \"authors\": [\"Calvin Webster\"],\n  \"notes\": [{\n    \"name\": \"Wufoo demo\",\n    \"href\": \"https://www.wufoo.com/html5/types/5-search.html?\"\n  }, {\n    \"name\": \"CSS Tricks\",\n    \"href\": \"https://css-tricks.com/webkit-html5-search-inputs/\"\n  }]\n}\n!*/\n/* DOC\nThere is a custom `search` event implemented in webkit browsers when using an `input[search]` element.\n*/\n\n  Modernizr.addTest('inputsearchevent',  hasEvent('search'));\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);"]}