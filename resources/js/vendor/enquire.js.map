{"version":3,"sources":["vendor/enquire.js"],"names":["f","exports","module","define","amd","window","global","self","this","enquire","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","QueryHandler","each","MediaQuery","query","isUnconditional","handlers","mql","matchMedia","listener","currentTarget","assess","addListener","prototype","constuctor","addHandler","handler","qh","push","matches","on","removeHandler","h","equals","destroy","splice","clear","removeListener","action","3","4","2","Util","isFunction","isArray","MediaQueryDispatch","queries","browserIsIncapable","constructor","register","q","options","shouldDegrade","match","unregister","deferSetup","setup","initialised","off","unmatch","target","Object","toString","apply","collection","fn","5"],"mappings":"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","file":"enquire.js","sourcesContent":["/*!\r\n * enquire.js v2.1.6 - Awesome Media Queries in JavaScript\r\n * Copyright (c) 2017 Nick Williams - http://wicky.nillia.ms/enquire.js\r\n * License: MIT */\r\n\r\n\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.enquire = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\nvar QueryHandler = require(3);\r\nvar each = require(4).each;\r\n\r\n/**\r\n * Represents a single media query, manages it's state and registered handlers for this query\r\n *\r\n * @constructor\r\n * @param {string} query the media query string\r\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\r\n */\r\nfunction MediaQuery(query, isUnconditional) {\r\n    this.query = query;\r\n    this.isUnconditional = isUnconditional;\r\n    this.handlers = [];\r\n    this.mql = window.matchMedia(query);\r\n\r\n    var self = this;\r\n    this.listener = function(mql) {\r\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\r\n        self.mql = mql.currentTarget || mql;\r\n        self.assess();\r\n    };\r\n    this.mql.addListener(this.listener);\r\n}\r\n\r\nMediaQuery.prototype = {\r\n\r\n    constuctor : MediaQuery,\r\n\r\n    /**\r\n     * add a handler for this query, triggering if already active\r\n     *\r\n     * @param {object} handler\r\n     * @param {function} handler.match callback for when query is activated\r\n     * @param {function} [handler.unmatch] callback for when query is deactivated\r\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\r\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\r\n     */\r\n    addHandler : function(handler) {\r\n        var qh = new QueryHandler(handler);\r\n        this.handlers.push(qh);\r\n\r\n        this.matches() && qh.on();\r\n    },\r\n\r\n    /**\r\n     * removes the given handler from the collection, and calls it's destroy methods\r\n     *\r\n     * @param {object || function} handler the handler to remove\r\n     */\r\n    removeHandler : function(handler) {\r\n        var handlers = this.handlers;\r\n        each(handlers, function(h, i) {\r\n            if(h.equals(handler)) {\r\n                h.destroy();\r\n                return !handlers.splice(i,1); //remove from array and exit each early\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Determine whether the media query should be considered a match\r\n     *\r\n     * @return {Boolean} true if media query can be considered a match, false otherwise\r\n     */\r\n    matches : function() {\r\n        return this.mql.matches || this.isUnconditional;\r\n    },\r\n\r\n    /**\r\n     * Clears all handlers and unbinds events\r\n     */\r\n    clear : function() {\r\n        each(this.handlers, function(handler) {\r\n            handler.destroy();\r\n        });\r\n        this.mql.removeListener(this.listener);\r\n        this.handlers.length = 0; //clear array\r\n    },\r\n\r\n    /*\r\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\r\n        */\r\n    assess : function() {\r\n        var action = this.matches() ? 'on' : 'off';\r\n\r\n        each(this.handlers, function(handler) {\r\n            handler[action]();\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports = MediaQuery;\r\n\r\n},{\"3\":3,\"4\":4}],2:[function(require,module,exports){\r\nvar MediaQuery = require(1);\r\nvar Util = require(4);\r\nvar each = Util.each;\r\nvar isFunction = Util.isFunction;\r\nvar isArray = Util.isArray;\r\n\r\n/**\r\n * Allows for registration of query handlers.\r\n * Manages the query handler's state and is responsible for wiring up browser events\r\n *\r\n * @constructor\r\n */\r\nfunction MediaQueryDispatch () {\r\n    if(!window.matchMedia) {\r\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\r\n    }\r\n\r\n    this.queries = {};\r\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\r\n}\r\n\r\nMediaQueryDispatch.prototype = {\r\n\r\n    constructor : MediaQueryDispatch,\r\n\r\n    /**\r\n     * Registers a handler for the given media query\r\n     *\r\n     * @param {string} q the media query\r\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\r\n     * @param {function} options.match fired when query matched\r\n     * @param {function} [options.unmatch] fired when a query is no longer matched\r\n     * @param {function} [options.setup] fired when handler first triggered\r\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\r\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\r\n     */\r\n    register : function(q, options, shouldDegrade) {\r\n        var queries         = this.queries,\r\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\r\n\r\n        if(!queries[q]) {\r\n            queries[q] = new MediaQuery(q, isUnconditional);\r\n        }\r\n\r\n        //normalise to object in an array\r\n        if(isFunction(options)) {\r\n            options = { match : options };\r\n        }\r\n        if(!isArray(options)) {\r\n            options = [options];\r\n        }\r\n        each(options, function(handler) {\r\n            if (isFunction(handler)) {\r\n                handler = { match : handler };\r\n            }\r\n            queries[q].addHandler(handler);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * unregisters a query and all it's handlers, or a specific handler for a query\r\n     *\r\n     * @param {string} q the media query to target\r\n     * @param {object || function} [handler] specific handler to unregister\r\n     */\r\n    unregister : function(q, handler) {\r\n        var query = this.queries[q];\r\n\r\n        if(query) {\r\n            if(handler) {\r\n                query.removeHandler(handler);\r\n            }\r\n            else {\r\n                query.clear();\r\n                delete this.queries[q];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n};\r\n\r\nmodule.exports = MediaQueryDispatch;\r\n\r\n},{\"1\":1,\"4\":4}],3:[function(require,module,exports){\r\n/**\r\n * Delegate to handle a media query being matched and unmatched.\r\n *\r\n * @param {object} options\r\n * @param {function} options.match callback for when the media query is matched\r\n * @param {function} [options.unmatch] callback for when the media query is unmatched\r\n * @param {function} [options.setup] one-time callback triggered the first time a query is matched\r\n * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?\r\n * @constructor\r\n */\r\nfunction QueryHandler(options) {\r\n    this.options = options;\r\n    !options.deferSetup && this.setup();\r\n}\r\n\r\nQueryHandler.prototype = {\r\n\r\n    constructor : QueryHandler,\r\n\r\n    /**\r\n     * coordinates setup of the handler\r\n     *\r\n     * @function\r\n     */\r\n    setup : function() {\r\n        if(this.options.setup) {\r\n            this.options.setup();\r\n        }\r\n        this.initialised = true;\r\n    },\r\n\r\n    /**\r\n     * coordinates setup and triggering of the handler\r\n     *\r\n     * @function\r\n     */\r\n    on : function() {\r\n        !this.initialised && this.setup();\r\n        this.options.match && this.options.match();\r\n    },\r\n\r\n    /**\r\n     * coordinates the unmatch event for the handler\r\n     *\r\n     * @function\r\n     */\r\n    off : function() {\r\n        this.options.unmatch && this.options.unmatch();\r\n    },\r\n\r\n    /**\r\n     * called when a handler is to be destroyed.\r\n     * delegates to the destroy or unmatch callbacks, depending on availability.\r\n     *\r\n     * @function\r\n     */\r\n    destroy : function() {\r\n        this.options.destroy ? this.options.destroy() : this.off();\r\n    },\r\n\r\n    /**\r\n     * determines equality by reference.\r\n     * if object is supplied compare options, if function, compare match callback\r\n     *\r\n     * @function\r\n     * @param {object || function} [target] the target for comparison\r\n     */\r\n    equals : function(target) {\r\n        return this.options === target || this.options.match === target;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = QueryHandler;\r\n\r\n},{}],4:[function(require,module,exports){\r\n/**\r\n * Helper function for iterating over a collection\r\n *\r\n * @param collection\r\n * @param fn\r\n */\r\nfunction each(collection, fn) {\r\n    var i      = 0,\r\n        length = collection.length,\r\n        cont;\r\n\r\n    for(i; i < length; i++) {\r\n        cont = fn(collection[i], i);\r\n        if(cont === false) {\r\n            break; //allow early exit\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function for determining whether target object is an array\r\n *\r\n * @param target the object under test\r\n * @return {Boolean} true if array, false otherwise\r\n */\r\nfunction isArray(target) {\r\n    return Object.prototype.toString.apply(target) === '[object Array]';\r\n}\r\n\r\n/**\r\n * Helper function for determining whether target object is a function\r\n *\r\n * @param target the object under test\r\n * @return {Boolean} true if function, false otherwise\r\n */\r\nfunction isFunction(target) {\r\n    return typeof target === 'function';\r\n}\r\n\r\nmodule.exports = {\r\n    isFunction : isFunction,\r\n    isArray : isArray,\r\n    each : each\r\n};\r\n\r\n},{}],5:[function(require,module,exports){\r\nvar MediaQueryDispatch = require(2);\r\nmodule.exports = new MediaQueryDispatch();\r\n\r\n},{\"2\":2}]},{},[5])(5)\r\n});"]}